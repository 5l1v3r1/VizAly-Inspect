#! /usr/bin/env python
""" Example command:
${HOME}/Applications/VisIt.app/Contents/MacOS/VisIt -nowin -cli -s bin/visit_example
"""

import argparse
import numpy
import visit

# parse command line
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("--input-file")
parser.add_argument("--output-file")
parser.add_argument("--scalar")
parser.add_argument("--resample-method", default="sph")
opts = parser.parse_args()

# read data
visit.OpenDatabase(opts.input_file)

# write empty Cinema database
os.mkdir(opts.output_file)
data_file = opts.output_file + "/data.csv"
with open(data_file, "w") as fp:
    header = ",".join(map(str, ["x_threshold", "y_threshold", "z_threshold",
                                "FILE"]))
    fp.write(header)

# set view
visit.ResetView()
view = GetView3D()
view.RotateAxis(0, 44)
view.RotateAxis(1, -23)
visit.SetView3D(view)

# loop over clipping planes
first = True
x_thresholds = numpy.arange(1, 20 + 1, 1)
y_thresholds = numpy.arange(1, 20 + 1, 1)
z_thresholds = numpy.arange(1, 20 + 1, 1)
for x_threshold in x_thresholds:
    for y_threshold in y_thresholds:
        for z_threshold in z_thresholds:

            # plot scalar
            visit.AddPlot("Pseudocolor", opts.scalar, 1, 1)

            # format plot
            plot_attrs = visit.PseudocolorAttributes()
            plot_attrs.SetColorTableName("Greys")
            plot_attrs.SetLightingFlag(0)
            SetPlotOptions(plot_attrs)

            # resample
            if opts.resample_method == "test":
                visit.AddOperator("Resample", 0)
                resample_attrs = visit.ResampleAttributes()
                resample_attrs.samplesX = 10
                resample_attrs.samplesY = 10
                resample_attrs.samplesZ = 10
                SetOperatorOptions(resample_attrs, 1)
            elif opts.resample_method == "sph":
                visit.AddOperator("SPHResample", 0)
                resample_attrs = visit.SPHResampleAttributes()
                resample_attrs.SetMaxX(20)
                resample_attrs.SetMaxY(20)
                resample_attrs.SetMaxZ(20)
                resample_attrs.SetXnum(20)
                resample_attrs.SetYnum(20)
                resample_attrs.SetZnum(20)
                resample_attrs.SetTensorSupportVariable("hh")
                resample_attrs.SetWeightVariable("mass")
                SetOperatorOptions(resample_attrs, 1)
            else:
                raise NotImplementedError("Unknown {}".format(
                                              opts.resample_method))

            # clip
            visit.AddOperator("Clip", 1)
            clip_attrs = visit.ClipAttributes()
            clip_attrs.SetQuality(1)
            clip_attrs.SetPlane2Status(1)
            clip_attrs.SetPlane3Status(1)
            clip_attrs.SetPlane1Origin(x_threshold, 0, 0)
            clip_attrs.SetPlane2Origin(0, y_threshold, 0)
            clip_attrs.SetPlane3Origin(0, 0, z_threshold)
            SetOperatorOptions(clip_attrs, 1)

            # plot mesh
            visit.AddPlot("Mesh", "mesh", 1, 1)
            mesh_attrs = visit.MeshAttributes()
            SetPlotOptions(mesh_attrs)

            # draw
            visit.DrawPlots()

            # get image path
            filename = "test_{}_{}_{}.png".format(
                                x_threshold, y_threshold, z_threshold)
            path = opts.output_file + "/" + filename

            # save
            swin = SaveWindowAttributes()
            swin.family = 0
            swin.fileName = path
            visit.SetSaveWindowAttributes(swin)
            visit.SaveWindow()

            # update Cinema database
            with open(data_file, "a") as fp:
                line = ",".join(map(str, [x_threshold, y_threshold,
                                          z_threshold, filename]))
                fp.write("\n" + line)

            ## remove clip
            #visit.RemoveOperator(1)
            visit.DeleteAllPlots()
