#! /usr/bin/env python
""" Takes two boxlib3 files and performs some operation.
"""

import argparse
import numpy
import yt
from tvtk import api
from tvtk.api import tvtk

# operations that can be performed between two datasets
_OPERATIONS = [
    "abs_diff_mag",
    "debug",
    "rel_diff_mag",
    "rel_diff_mag_pct",
    "scalar_1",
    "scalar_2",
]

# parse command line
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("--input-file-1")
parser.add_argument("--input-file-2")
parser.add_argument("--output-file")
parser.add_argument("--scalar")
parser.add_argument("--operations", choices=_OPERATIONS, nargs="+")
parser.add_argument("--level", type=int, default=None)
opts = parser.parse_args()

# load files
fp_1 = yt.load(opts.input_file_1)
fp_2 = yt.load(opts.input_file_2)

# read data
level = opts.level if opts.level != None else fp_1.max_level
domain_left_edge = fp_1.domain_left_edge
domain_dimensions = fp_1.domain_dimensions
data_1 = fp_1.covering_grid(level=level,
                            left_edge=domain_left_edge,
                            dims=domain_dimensions)
data_2 = fp_2.covering_grid(level=level,
                            left_edge=domain_left_edge,
                            dims=domain_dimensions)

# get scalars
scalar_1 = data_1[opts.scalar]
scalar_2 = data_2[opts.scalar]

# create a (ndims, npoints) for spatial coordinates
x, y, z = numpy.mgrid[0:domain_dimensions[0] + 1,
                      0:domain_dimensions[1] + 1,
                      0:domain_dimensions[2] + 1]
pts = numpy.empty(z.shape + (3,), dtype=float)
pts[..., 0] = x
pts[..., 1] = y
pts[..., 2] = z

# reorder the points
pts = pts.transpose(2, 1, 0, 3).copy()
pts.shape = (int(pts.size / 3), 3)

# create structured grid
grid = tvtk.StructuredGrid(dimensions=domain_dimensions + 1, points=pts)

# loop over operations
for operation in opts.operations:

    # perform operation
    name = operation
    if operation == "rel_diff_mag":
        result = abs(scalar_1 - scalar_2) / (scalar_2)
    elif operation == "rel_diff_mag_pct":
        result = abs(scalar_1 - scalar_2) / (scalar_2) * 100.0
    elif operation == "abs_diff_mag":
        result = abs(scalar_1 - scalar_2)
    elif operation == "scalar_1":
        result = scalar_1
        name = "{}_1".format(opts.scalar)
    elif operation == "scalar_2":
        result = scalar_2
        name = "{}_2".format(opts.scalar)
    elif operation == "debug":
        result = numpy.ones(domain_dimensions)
        result[0, 0, 0] = 10
        result[1, 0, 0] = 20
        result[0, 1, 0] = 30
        result[0, 0, 1] = 40
        result[10, 10, 10] = 50
    scalars = result.T.copy()

    # add data to structured grid
    arr = tvtk.FloatArray()
    arr.from_array(scalars.ravel())
    arr.name = name
    grid.cell_data.add_array(arr)

# write output file
api.write_data(grid, opts.output_file)
